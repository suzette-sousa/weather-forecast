{"version":3,"sources":["components/Heading.js","components/Form.js","components/Forecast.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Heading","props","Form","onSubmit","loadWeather","htmlFor","id","type","name","placeholder","required","Forecast","className","icon","src","alt","country","city","temperature","description","humidity","pressure","error","api_key","process","App","state","getWeather","e","a","target","elements","value","preventDefault","fetch","api_call","json","response","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.739e23da.chunk.js","sourcesContent":["import React from 'react';\n\nconst Heading = (props) => {\n  return (\n    <div>\n      <h1>Conditions météo&shy;rologiques en temps réel</h1>\n    </div>\n  )\n}\n\nexport default Heading;\n","import React from 'react';\n\nconst Form = (props) => {\n  return (\n    <form onSubmit={props.loadWeather}>\n      <label htmlFor=\"city\">Choisir une ville</label>\n      <input id=\"city\" type=\"text\" name=\"city\" placeholder=\"Paris, Lisbonne...\" required />\n      <label htmlFor=\"country\">Choisir un pays</label>\n      <input id=\"country\" type=\"text\" name=\"country\" placeholder=\"France, Portugal...\" required />\n      <button>Afficher la météo</button>\n    </form>\n  )\n}\n\nexport default Form;\n","import React from 'react';\n\nconst Forecast = (props) => {\n  return (\n    <div className=\"weather-data\">\n      {props.icon && <img src={`https://openweathermap.org/img/w/${props.icon}.png`} alt=\"Icône temps météo\" />}\n      {props.country && props.city && <p>Lieu: {props.city}, {props.country}</p>}\n      {props.temperature && <p>Température : {props.temperature} °C</p>}\n      {props.description && <p>Temps : {props.description}</p>}\n      {props.humidity && <p>Humidité : {props.humidity}</p>}\n      {props.pressure && <p>Pression athmosphérique : {props.pressure}</p>}\n      {props.error && <p>{props.error}</p>}\n    </div>\n  )\n}\n\nexport default Forecast;\n","import React from 'react';\nimport './App.css';\nimport Heading from './components/Heading';\nimport Form from './components/Form';\nimport Forecast from './components/Forecast';\n\nconst api_key = process.env.REACT_APP_API_KEY;\n\nclass App extends React.Component {\n  state = {\n    temperature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    pressure: \"\",\n    icon: \"\",\n    description: \"\",\n    error: \"\"\n  }\n\n  getWeather = async (e) => {\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&lang=fr&units=metric&appid=${api_key}`);\n  \n    const response = await api_call.json();\n    if(city && country) {\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        pressure: response.main.pressure,\n        icon: response.weather[0].icon,\n        description: response.weather[0].description\n      })\n    } else {\n      this.setState({\n        error: \"Remplir les champs\"\n      })\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Heading />\n        <Form loadWeather={this.getWeather} />\n        {this.state.city && <Forecast \n        temperature={this.state.temperature}\n        humidity={this.state.humidity}\n        pressure={this.state.pressure}\n        city={this.state.city}\n        country={this.state.country}\n        description={this.state.description}\n        icon={this.state.icon}\n        error={this.state.error} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}